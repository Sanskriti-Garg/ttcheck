import React, { useState, useRef } from 'react';
import { Dropdown, Popup, Label } from 'semantic-ui-react';
import 'semantic-ui-css/semantic.min.css';
import './App.css';

function App() {
  const [selectedValues, setSelectedValues] = useState([]);
  const [popupOpen, setPopupOpen] = useState(false);

  const assessmentStatusOptions = [
    { text: "Not Started", value: "Not Started" },
    { text: "In Architecture Review", value: "In Architecture Review" },
    { text: "Ready For AC Review", value: "Ready For AC Review" },
    { text: "Ready For TBM Review", value: "Ready For TBM Review" },
    { text: "In RFP Assessment", value: "In RFP Assessment" },
    { text: "TSC Evaluation", value: "TSC Evaluation" },
    { text: "Architecture Assessment Completed", value: "Architecture Assessment Completed" },
    { text: "On Hold", value: "On Hold" },
  ];

  const handleChange = (e, { value }) => {
    setSelectedValues(value);
  };

  const handleDeselect = (valueToRemove) => {
    setSelectedValues(prev => prev.filter(val => val !== valueToRemove));
  };

  const SelectionTooltip = () => (
    <div className="selection-tooltip">
      <div className="tooltip-header">Selected Options</div>
      <div className="tooltip-options">
        {selectedValues.map(value => {
          const option = assessmentStatusOptions.find(opt => opt.value === value);
          return (
            <div key={value} className="tooltip-option">
              <span>{option?.text || value}</span>
              <Label
                circular
                size="tiny"
                onClick={(e) => {
                  e.stopPropagation();
                  handleDeselect(value);
                }}
                className="deselect-button"
              >
                Ã—
              </Label>
            </div>
          );
        })}
      </div>
    </div>
  );

  const renderDropdownText = () => {
    if (selectedValues.length === 0) return 'Select Assessment Status';

    const firstOption = assessmentStatusOptions.find(opt => opt.value === selectedValues[0]);
    const firstText = firstOption?.text || selectedValues[0];

    if (selectedValues.length === 1) {
      return firstText;
    }

    const restCount = selectedValues.length - 1;

    return (
      <span>
        {firstText}{' '}
        <Popup
          on="click"
          open={popupOpen}
          onClose={() => setPopupOpen(false)}
          onOpen={() => setPopupOpen(true)}
          trigger={
            <span
              style={{ color: 'blue', textDecoration: 'underline', cursor: 'pointer' }}
              onClick={(e) => {
                e.stopPropagation();
              }}
            >
              +{restCount} selected
            </span>
          }
          content={<SelectionTooltip />}
          position="bottom left"
          className="selection-popup"
        />
      </span>
    );
  };

  return (
    <div className="app">
      <h2>Assessment Status Dropdown Demo</h2>

      <div className="dropdown-container">
        <label>
          Assessment Status<span className="required">*</span>
        </label>

        <Dropdown
          placeholder="Select Assessment Status"
          fluid
          multiple
          selection
          search
          options={assessmentStatusOptions}
          value={selectedValues}
          onChange={handleChange}
          closeOnChange={false}
          showCheckbox
          renderLabel={() => null}
          text={renderDropdownText()}
          className="compact-dropdown"
        />
      </div>
    </div>
  );
}

export default App;
